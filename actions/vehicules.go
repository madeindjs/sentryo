package actions

import (
	"github.com/admin/sentryo/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Vehicule)
// DB Table: Plural (vehicules)
// Resource: Plural (Vehicules)
// Path: Plural (/vehicules)
// View Template Folder: Plural (/templates/vehicules/)

// VehiculesResource is the resource for the Vehicule model
type VehiculesResource struct {
	buffalo.Resource
}

// List gets all Vehicules. This function is mapped to the path
// GET /vehicules
func (v VehiculesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	vehicules := &models.Vehicules{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Vehicules from the DB
	if err := q.All(vehicules); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, vehicules))
}

// Show gets the data for one Vehicule. This function is mapped to
// the path GET /vehicules/{vehicule_id}
func (v VehiculesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Vehicule
	vehicule := &models.Vehicule{}

	// To find the Vehicule the parameter vehicule_id is used.
	if err := tx.Find(vehicule, c.Param("vehicule_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, vehicule))
}

// Create adds a Vehicule to the DB. This function is mapped to the
// path POST /vehicules
func (v VehiculesResource) Create(c buffalo.Context) error {
	// Allocate an empty Vehicule
	vehicule := &models.Vehicule{}

	// Bind vehicule to the html form elements
	if err := c.Bind(vehicule); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(vehicule)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, vehicule))
	}

	// and redirect to the vehicules index page
	return c.Render(201, r.Auto(c, vehicule))
}

// Update changes a Vehicule in the DB. This function is mapped to
// the path PUT /vehicules/{vehicule_id}
func (v VehiculesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Vehicule
	vehicule := &models.Vehicule{}

	if err := tx.Find(vehicule, c.Param("vehicule_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Vehicule to the html form elements
	if err := c.Bind(vehicule); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(vehicule)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, vehicule))
	}

	// and redirect to the vehicules index page
	return c.Render(200, r.Auto(c, vehicule))
}

// Destroy deletes a Vehicule from the DB. This function is mapped
// to the path DELETE /vehicules/{vehicule_id}
func (v VehiculesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Vehicule
	vehicule := &models.Vehicule{}

	// To find the Vehicule the parameter vehicule_id is used.
	if err := tx.Find(vehicule, c.Param("vehicule_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(vehicule); err != nil {
		return errors.WithStack(err)
	}

	// Redirect to the vehicules index page
	return c.Render(200, r.Auto(c, vehicule))
}
